package main

import (
	{{ if not .Tools.IsUseTempl }}
	"io"
	"html/template"
	"path/filepath"
	{{ end }}
	"fmt"
	"strconv"
	"time"

	"github.com/labstack/echo/v5/middleware"
	"github.com/pocketbase/pocketbase"
	"github.com/pocketbase/pocketbase/core"

	gowebly "github.com/gowebly/helpers"
)

{{ if not .Tools.IsUseTempl }}
// TemplateRegistry represents a custom 'html/template' renderer for Echo framework.
type Template struct {
	templates *template.Template
}

// Render renders all templates, using gowebly helper.
func (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	tmpl, err := gowebly.ParseTemplates(filepath.Join("templates", "pages", t.templates.Name()))
	if err != nil {
		return err
	}

	return tmpl.Execute(w, nil)
}
{{ end }}

// runServer runs a new HTTP server with the loaded environment variables.
func runServer() error {
	// Validate environment variables.
	port, err := strconv.Atoi(gowebly.Getenv("BACKEND_PORT", "{{ trim .Backend.Port }}"))
	if err != nil {
		return err
	}

	// Create a new PocketBase server.
	app := pocketbase.New()

	// Add PocketBase onBeforeServe middleware.
	app.OnBeforeServe().Add(func(e *core.ServeEvent) error {
		{{ if not .Tools.IsUseTempl }}
		// Create a new Echo renderer for templates.
		e.Router.Renderer = &Template{
			templates: template.Must(template.ParseGlob("templates/**/*.html")),
		}
		{{ end }}

		// Add Echo middlewares.
		e.Router.Use(middleware.Logger())

		// Handle static files.
		e.Router.Static("/static", "./static")

		// Handle index page view.
		e.Router.GET("/", indexViewHandler)

		// Handle API endpoints.
		e.Router.GET("/api/hello-world", showContentAPIHandler)

		// Set server options from environment variables.
		// For more information, see https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/
	    // Note: The ReadTimeout and WriteTimeout settings may interfere with SSE (Server-Sent Event) or WS (WebSocket) connections.
        // For SSE or WS, these timeouts can cause the connection to reset after 10 or 5 seconds due to the ReadTimeout and WriteTimeout settings.
        // If you plan to use SSE or WS, consider commenting out or removing the ReadTimeout and WriteTimeout key-value pairs.
		e.Server.Addr = fmt.Sprintf(":%d", port)
		e.Server.ReadTimeout = 5 * time.Second
		e.Server.WriteTimeout = 10 * time.Second

		return nil
	})

	return app.Start()
}
